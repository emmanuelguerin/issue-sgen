<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{C76D042B-3722-45B8-9131-DC8B6A1B1D4E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>LibWithWebReference</RootNamespace>
    <AssemblyName>LibWithWebReference</AssemblyName>
    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Class1.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Lib\Lib.csproj">
      <Project>{0c674127-3969-4f76-8709-5ffc04a26ca8}</Project>
      <Name>Lib</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="ImplicitlyExpandNETStandardFacades" Condition="'$(ImplicitlyExpandNETStandardFacades)' == 'true'" BeforeTargets="_HandlePackageFileConflicts;ResolveAssemblyReferences">
    <ItemGroup>
      <_CandidateNETStandardReferences Include="@(Reference);@(_ResolvedProjectReferencePaths)" />
      <_InboxNETStandardFolders Include="$(TargetFrameworkDirectory)" />
    </ItemGroup>
    <!-- determine if NETStandard.dll is supported inbox for this TargetFramework -->
    <PropertyGroup Condition="'$(NETStandardInbox)' == ''">
      <NETStandardInbox Condition="Exists('%(_InboxNETStandardFolders.Identity)\netstandard.dll')">true</NETStandardInbox>
    </PropertyGroup>
    <!-- determine if any references depend on NETStandard -->
    <!-- Check metadata of _ResolvedProjectReferencePaths items.  This handles the case where we are doing a design-time build and a referenced project
         hasn't been built yet, so there is no corresponding assembly on disk for the GetDependsOnNETStandard task to examine.
         
         More context: https://github.com/dotnet/sdk/issues/1403
         -->
    <PropertyGroup Condition="'$(DependsOnNETStandard)' == '' AND '$(NETStandardInbox)' != 'true'">
      <DependsOnNETStandard Condition="('%(_ResolvedProjectReferencePaths.TargetFrameworkIdentifier)' == '.NETStandard') And ('%(_ResolvedProjectReferencePaths.TargetFrameworkVersion)' &gt;= '1.5')">true</DependsOnNETStandard>
    </PropertyGroup>
    <GetDependsOnNETStandard Condition="'$(DependsOnNETStandard)' == '' AND '$(NETStandardInbox)' != 'true' AND '@(_CandidateNETStandardReferences)' != ''" References="@(_CandidateNETStandardReferences)">
      <Output TaskParameter="DependsOnNETStandard" PropertyName="DependsOnNETStandard" />
    </GetDependsOnNETStandard>
    <!-- prevent using an older SDK version with NETStandard2.0 references -->
    <PropertyGroup>
      <_UsingOldSDK Condition="'$(UsingMicrosoftNETSdk)' != 'true' AND ('$(TargetFramework)' != '' OR '$(TargetFrameworks)' != '')">true</_UsingOldSDK>
    </PropertyGroup>
    <NETBuildExtensionsError Condition="'$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true' AND '$(_UsingOldSDK)' == 'true'" ResourceName="UnsupportedSDKVersionForNetStandard20" />
    <!-- if any reference depends on netstandard and it is not inbox, add references and implementation assemblies for netstandard2.0  -->
    <ItemGroup Condition="'$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true'">
      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.7'" Include="$(MSBuildThisFileDirectory)\net47\lib\*.dll" />
      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.2'" Include="$(MSBuildThisFileDirectory)\net462\lib\*.dll" Exclude="@(_NETStandardLibraryNETFrameworkLib->'$(MSBuildThisFileDirectory)\net462\lib\%(FileName).dll')" />
      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.1'" Include="$(MSBuildThisFileDirectory)\net461\lib\*.dll" Exclude="@(_NETStandardLibraryNETFrameworkLib->'$(MSBuildThisFileDirectory)\net461\lib\%(FileName).dll')" />
      <!-- Remove simple name references if we're directly providing a reference assembly to the compiler. For example,
           consider a project with a Reference Include="System.Net.Http" or "System.IO.Compression", which are both in 
           _NETStandardLibraryNETFrameworkReference.
           Simple references can also come from NuGet framework assemblies, hence this statement should occur after
           including all computed references, thus this target is scheduled after references have been raised by NuGet
           targets. -->
      <Reference Remove="%(_NETStandardLibraryNETFrameworkLib.FileName)" />
      <Reference Include="@(_NETStandardLibraryNETFrameworkLib)">
        <!-- netfx.force.conflicts is only needed at compile time. -->
        <Private Condition="'%(FileName)' == 'netfx.force.conflicts'">false</Private>
      </Reference>
    </ItemGroup>
  </Target>
</Project>